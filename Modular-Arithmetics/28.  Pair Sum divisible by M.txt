Problem Description

Given an array of integers A and an integer B, find and return the number of pairs in A whose sum is divisible by B.

Since the answer may be large, return the answer modulo (109 + 7).



Problem Constraints

1 <= length of the array <= 100000
1 <= A[i] <= 109
1 <= B <= 106



Input Format

The first argument given is the integer array A.
The second argument given is the integer B.



Output Format

Return the total number of pairs for which the sum is divisible by B modulo (109 + 7).



Example Input

Input 1:

 A = [1, 2, 3, 4, 5]
 B = 2
Input 2:

 A = [5, 17, 100, 11]
 B = 28


Example Output

Output 1:

 4
Output 2:

 1


Example Explanation

Explanation 1:

 All pairs which are divisible by 2 are (1,3), (1,5), (2,4), (3,5). 
 So total 4 pairs.

// Java

public class Solution {
    public int solve(int[] A, int B) {
        /*
        Letâ€™s optimize using the fact that the value is up to 10^6, and using the 
        modulo operator, we can reduce all the elements in the range 0 to B-1.

        We make an auxiliary array cnt, the index i denotes the number of elements 
        which gives i as the remainder when divided by B.

        Now, we know that the sum of the pair modulo B should be equal to 0.

        So we will count the pairs that give the sum of the pair modulo B is 0.

        We can do this by adding cnt[i]*cnt[j] in the answer such that (i + j)%B=0.
        Note: Keep in mind the base case when i==0 and j==0 and i==j.

        TC = O(N) || SC = O(N)
        */
        int n=A.length;
        long count=0;
        int mod=1000000007;
        Map<Integer,Long> hm=new HashMap<Integer,Long>();
        for(int i=0;i<n;i++){
            int val=0;
            if(A[i]>0){
                val=A[i]%B;
            }else{
                val=(A[i]%B)+B;
            }
           
            if(hm.containsKey(val)){
                hm.put(val,hm.get(val)+1l);
            }else{
                hm.put(val,1l);
            }  
        }
       
        if(hm.get(0)!=null){
           long k=hm.get(0);
           k=k%mod;
            count+=(k*(k-1))/2;
        }
       
        int i=1,j=B-1;
        while(i<j){
            if((hm.get(i) != null) && (hm.get(j) != null)){
                count+=hm.get(i)*hm.get(j);
            }
            i++;
            j--;  
        }

        if(B%2==0){
            if(hm.get(B/2)!=null){
                long k=hm.get(B/2);
                k=k%mod;
                count+=(k*(k-1))/2;
            }
        }

        if(count<0){
            return (int)(count+mod)%mod;
        }
        return (int)count%mod;
    }
}
