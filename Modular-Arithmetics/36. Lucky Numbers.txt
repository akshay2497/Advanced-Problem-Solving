Problem Description
A lucky number is a number that has exactly 2 distinct prime divisors.

You are given a number A, and you need to determine the count of lucky numbers between the range 1 to A (both inclusive).



Problem Constraints
1 <= A <= 50000



Input Format
The first and only argument is an integer A.



Output Format
Return an integer i.e the count of lucky numbers between 1 and A, both inclusive.



Example Input
Input 1:

 A = 8
Input 2:

 A = 12


Example Output
Output 1:

 1
Output 2:

 3


Example Explanation
Explanation 1:

 Between [1, 8] there is only 1 lucky number i.e 6.
 6 has 2 distinct prime factors i.e 2 and 3.
Explanation 2:

 Between [1, 12] there are 3 lucky number: 6, 10 and 12.
 
 //Java
 
 public class Solution {
    public int solve(int A) {
        /*
        Firstly, create an array, letâ€™s say isprime where isprime[i] denotes true or false 
        if number i is prime or not.

        Now, for every number in the range [1, A], calculate the number of prime divisors, 
        and if the count of distinct prime factors for a number is 2, increment the answer.

        This can be easily done in O(N * sqrt(N)).

        The solution can further be optimised to run in O(N * log(N)). The idea is to use a 
        sieve and in place of marking a number of non-prime
        in the array, while using sieve, just add 1 to it for each prime you iterate. In the 
        end, you will have the number of prime factors of each number. 

        TC = O(N*Log(N)) || SC = O(N)
        */
        int[] primeArray = new int[A+1];
        Arrays.fill(primeArray, 0);
        int count = 0;
        fillPrimeArray(primeArray, A);
        for(int i = 2; i <= A; i++){
            if(primeArray[i] == 2)
                count++;
        }
        return count;
    }

    public void fillPrimeArray(int[] arr, int A){
        for(int i = 2; i <= A; i++){
            if(arr[i] == 0){
                for(int j = 2*i; j <= A; j += i){
                    arr[j] += 1;
                }
            }
        }
    }
}
