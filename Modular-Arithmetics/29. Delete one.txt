Problem Description

Given an integer array A of size N. You have to delete one element such that the GCD(Greatest common divisor) of the remaining array is maximum.

Find the maximum value of GCD.



Problem Constraints

2 <= N <= 105
1 <= A[i] <= 109



Input Format

First argument is an integer array A.



Output Format

Return an integer denoting the maximum value of GCD.



Example Input

Input 1:

 A = [12, 15, 18]
Input 2:

 A = [5, 15, 30]


Example Output

Output 1:

 6
Output 2:

 15


Example Explanation

Explanation 1:

 
 If you delete 12, gcd will be 3.
 If you delete 15, gcd will be 6.
 If you delete 18, gcd will 3.
 Maximum vallue of gcd is 6.
Explanation 2:

 If you delete 5, gcd will be 15.
 If you delete 15, gcd will be 5.
 If you delete 30, gcd will be 5.
 
 //Java
 
 public class Solution {
    public int solve(int[] A) {
        /*
        We can maintain two arrays for prefix and suffix gcd; likewise, we do for prefix sum and suffix sum.
        Then,for each index, i:1 to N calculate gcd(prefix[i-1],suffix[i+1]) and return the maximum among all.

        TC = O(N*log(max(A))) || SC = O(N + log(max(A)))
        */
        int n = A.length;
        int[] pfA = new int[n];
        int[] sfA = new int[n];
        
        int g1 = 0, g2 = 0;
        for(int i = 0, j = n-1; i < n; i++,j--){
            g1 = gcd(g1, A[i]);
            g2 = gcd(g2, A[j]);
            pfA[i] = g1;
            sfA[j] = g2;
        }
        int maxgcd = Integer.MIN_VALUE;
        for(int i = 0; i < n; i++){
            int leftgcd = i == 0 ? 0 : pfA[i-1];
            int rightgcd = i == n-1 ? 0 : sfA[i+1];
            int g = gcd(leftgcd, rightgcd);
            maxgcd = Math.max(maxgcd, g);
        }
        return maxgcd;
    }

    public int gcd(int A, int B) {
        if(A == 0)
            return B;
        return gcd(B%A, A);
    }
}
