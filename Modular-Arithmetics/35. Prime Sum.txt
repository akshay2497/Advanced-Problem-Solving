Problem Description
Given an even number A ( greater than 2 ), return two prime numbers whose sum will be equal to the given number.

If there is more than one solution possible, return the lexicographically smaller solution.

If [a, b] is one solution with a <= b, and [c,d] is another solution with c <= d, then 
[a, b] < [c, d], If a < c OR a==c AND b < d. 
NOTE: A solution will always exist. Read Goldbach's conjecture.



Problem Constraints
4 <= A <= 2*107



Input Format
First and only argument of input is an even number A.



Output Format
Return a integer array of size 2 containing primes whose sum will be equal to given number.



Example Input
 4


Example Output
 [2, 2]


Example Explanation
 There is only 1 solution for A = 4.
 
// Java

public class Solution {
    public int[] primesum(int A) {
        /*
        Approach:
        1. Traverse from 2 to A in for loop check if i and A-i are prime if yes return 
           i and A-i in the array.
           TC = O(A*sqrt(A)) sqrt(A) for checking if no is prime or not.
        2. optimized:
            i. Create an boolean prime array of length A+1 to check if a number is prime
               or not this will reduce TC to A*log(A)
            ii. TC = O(N*log(N)) || SC = O(N)
        */
        boolean[] primeArr = new boolean[A+1];
        for(int i = 0; i < primeArr.length; i++)
            primeArr[i] = true;
        fillPrimeArray(primeArr, A);
        int[] ans = new int[2];
        for(int i = 2; i <= A; i++){
            int x = A - i;
            if(primeArr[i] && primeArr[x]){
                ans[0] = i;
                ans[1] = x;
                break;
            }
        }
        return ans;
    }

    public void fillPrimeArray(boolean[] arr, int A){
        for(int i = 2; i*i <= A; i++){
            if(arr[i]){
                for(int j = i*i; j <= A; j += i){
                    arr[j] = false;
                }
            }
        }
    }
}
