You have given an array A having N integers. Let say G is the product of all elements of A.

You have to find the number of distinct prime divisors of G.



Input Format

The first argument given is an Array A, having N integers.
Output Format

Return an Integer, i.e number of distinct prime divisors of G.
Constraints

1 <= N <= 1e5
1 <= A[i] <= 1e5
For Example

Input:
    A = [1, 2, 3, 4]
Output:
     2

Explanation:
    here G = 1 * 2 * 3 * 4 = 24
    and distinct prime divisors of G are [2, 3]
See Expected Output


//Java

public class Solution {
    public int solve(int[] A) {
        /*
        You just have to find the prime divisors of each element of an array and 
        count the distinct prime divisors.
        You can use any data structure like set to store distinct elements.

        TC = O(N+sqrt(A)*A) || SC = O(N)
        */
        ArrayList<ArrayList<Integer>> primeArr = new ArrayList<>();
        for(int i = 0; i <= 100005;i++)
            primeArr.add(new ArrayList<Integer>());

        fillPrimeArray(primeArr, 100000+5);

        int count = 0;
        HashSet<Integer> set = new HashSet<>();
        for(int a : A){
            for(int x : primeArr.get(a))
                set.add(x);
        }
        return set.size();
    }

    public void fillPrimeArray(ArrayList<ArrayList<Integer>> arr, int A){
        for(int i = 2; i*i <= A; i++){
            if(arr.get(i).isEmpty()){
                arr.get(i).add(i);
                for(int j = i+i; j <= A; j += i){
                    arr.get(j).add(i);
                }
            }
        }
    }
}
