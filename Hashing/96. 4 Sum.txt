Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
The solution set must not contain duplicate quadruplets.
Example : Given array S = {1 0 -1 0 -2 2}, and target = 0 A solution set is:

    (-2, -1, 1, 2)
    (-2,  0, 0, 2)
    (-1,  0, 0, 1)
Also make sure that the solution set is lexicographically sorted. Solution[i] < Solution[j] iff Solution[i][0] < Solution[j][0] OR (Solution[i][0] == Solution[j][0] AND … Solution[i][k] < Solution[j][k])


//Java


public class Solution {
    public ArrayList<ArrayList<Integer>> fourSum(ArrayList<Integer> A, int B) {
        HashSet<ArrayList<Integer>> set = new HashSet<>();
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        if(A==null || A.size()==0) return ans;
        Collections.sort(A);
        int n = A.size();
        for(int i = 0; i < n; i++){
            for(int j = i+1; j < n; j++){
                int a = A.get(i), b = A.get(j);
                int sum = B - a - b;
                int p1 = j+1, p2 = n-1;
                while(p1 < p2){
                    int c = A.get(p1);
                    int d = A.get(p2);
                    int s = c + d;
                    if(s < sum)
                        p1++;
                    else if(s > sum)
                        p2--;
                    else{
                        ArrayList<Integer> arr = new ArrayList<>();
                        arr.add(a);
                        arr.add(b);
                        arr.add(c);
                        arr.add(d);
                        if(set.contains(arr) == false){
                            ans.add(arr);
                            set.add(arr);
                        }
                        p1++;
                        p2--;
                    }
                }
            }
        }
        return ans;
    }
}
