Problem Description

Reverse the bits of an 32 bit unsigned integer A.



Problem Constraints

0 <= A <= 232



Input Format

First and only argument of input contains an integer A.



Output Format

Return a single unsigned integer denoting the decimal value of reversed bits.



Example Input

Input 1:

 0
Input 2:

 3


Example Output

Output 1:

 0
Output 2:

 3221225472


Example Explanation

Explanation 1:

        00000000000000000000000000000000    
=>      00000000000000000000000000000000
Explanation 2:

        00000000000000000000000000000011    
=>      11000000000000000000000000000000

//Java

public class Solution {
	public long reverse(long a) {
        /*
        Approach :- 
        1.  Take a long answer variable to store the answer.
        2.  take two more variables set i to 0 and j to 31
        3.  Run a loop till i < 32 check if i'th bit set in given number if yes then
            set 31-i th bit in answer.
            Note :- while setting bit in answer if value of j is 31 and we do 1 << 31 then 
                    overflow can occure so to avoid that use 1L << 31
        4.  Return the answer.
         TC = O(1) || SC = O(1) 
        */
        long ans = 0;
        int i = 0;
        int j = 31;
        while(i < 32){
            if(checkBit(a, i)){
                ans = (ans | (1L << j));
            }
            i++;
            j--;
        }
        return ans;
	}

    public boolean checkBit(long num, int pos){
        return (num & (1 << pos)) > 0 ? true : false;
    }
}
