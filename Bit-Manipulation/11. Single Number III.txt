Problem Description
Given an array of positive integers A, two integers appear only once, and all the other integers appear twice.
Find the two integers that appear only once.



Problem Constraints
2 <= |A| <= 100000
1 <= A[i] <= 109



Input Format
The first argument is an array of integers of size N.



Output Format
Return an array of two integers that appear only once.



Example Input
Input 1:
A = [1, 2, 3, 1, 2, 4]
Input 2:

A = [1, 2]


Example Output
Output 1:
[3, 4]
Output 2:

[1, 2]


Example Explanation
Explanation 1:
3 and 4 appear only once.
Explanation 2:

1 and 2 appear only once.

//Java

public class Solution {
    public int[] solve(int[] A) {
        /*
        Approach :-
        eg. A= {1,2,3,1,2,4} 
        after doing xor of all array elements we will get ans as 3^4
        lets see what it looks like in binary
        3 = 011
        4 = 100
        --------
    ans =   111
        ** If you know peoperty of xor 0^1 = 1, 1^0 = 1 but 1^1 = 0, 0^0 = 1
        Observation:- In the answerxor where-ever the bit is set that means
                      any one of single no has bit at that position set and in 
                      other single no the bit at that position is unset.
        **  Now the point is can we use this?
        **  Yes ofcourse, if we segregate array elements in two groups based on answerxors 
        any of the set bit position this will make sure two single no will fall in 
        different groups.
        **  After segragating into two groups if we take xor of all elements in the both 
        groups all the repeating elements will get cancelled out and we will gat the
        answer1 from group1 and answer2 from group2. 
        */
        int xor = 0;
        for(int i = 0; i < A.length; i++){
            //Taking xor of all elements in the array 
            xor = xor ^ A[i];
        }
        //Finding position of set bit in answer-xor
        int posOfSetBit = findSetBitPosition(xor);
        //Two variables for two groups.
        int ans1 = 0, ans2 = 0;
        for(int i = 0; i < A.length; i++){
            //Check if current element's posOfSetBit is set if Yes
            //add it to first group and take xor.
            if(checkBit(A[i], posOfSetBit)){
                ans1 = ans1 ^ A[i];
            //else add it to second group and take xor.
            }else{
                ans2 = ans2 ^ A[i];
            }
        }
        //finally add answers to ans array and return after sorting.
        int[] ans = {ans1, ans2};
        Arrays.sort(ans);
        return ans;

        //TC = O(Log(intMax) + N) || SC = O(1)
    }

    public int findSetBitPosition(int xor){
        int pos = 0;
        while(pos < 32){
            if(checkBit(xor, pos)){
                return pos;
            }else{
                pos++;
            }
        }
        return pos;
    }
    public boolean checkBit(int val, int pos){
        return (val & (1 << pos)) > 0 ? true : false;
    }
}
