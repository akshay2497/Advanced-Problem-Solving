Hamming distance between two non-negative integers is defined as the number of positions at which the corresponding bits are different.

For example,

HammingDistance(2, 7) = 2, as only the first and the third bit differs in the binary representation of 2 (010) and 7 (111).

Given an array of N non-negative integers, find the sum of hamming distances of all pairs of integers in the array. Return the answer modulo 1000000007.

Example

Let f(x, y) be the hamming distance defined above.

A=[2, 4, 6]

We return,
f(2, 2) + f(2, 4) + f(2, 6) + 
f(4, 2) + f(4, 4) + f(4, 6) +
f(6, 2) + f(6, 4) + f(6, 6) = 

0 + 2 + 1
2 + 0 + 1
1 + 1 + 0 = 8

//Java

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int hammingDistance(final int[] A) {
        /*
        Approach : To find how many bits differ in binary representation we can use XOR
        eg = A = [2, 4, 6]
        Total pairs
        2^2 2^4 2^6
        4^2 4^4 4^6
        6^2 6^4 6^6
        if you see the digonal ele are same and other two parts are mirror images of each
        other so we can use any one part

        If we take XOR on both then find out count of set bits in xor value it gives us 
        no of different bits in both nos. 

        2^4 = 6 = 1 1 0 == hamming wt = 2
        2^6 = 4 = 1 0 0 == hamming wt = 1
        4^6 = 2 = 0 1 0 == hamming wt = 1 
--------------------------------------------
set bits          2 2 0 = 2+2 = 4 Hamming wt of one mirror side to get total hamming wt multiply by 2
                                ans = 2 * 4 = 8.

        But taking XOR then counting the set bits in this process time complexity will increase
        so to get this hamming wt using the numbers what we can do is..
        
        Lets write down the binary representation of each number in array
        2 = 0 1 0, 4 = 1 0 0, 6 = 1 1 0

    1.  Lets try to find in the given array how many elements have 0th bit set
        set = 0 -- unset = N-set = 3-0 = 3
        multiply set and unset valus we get the hamming wt of 0th bit position
        hamming wt = set * unset = 0 * 3 = 0
    2.  Lets try to find in the given array how many elements have 1st bit set
        set = 2 -- unset = N-set = 3-2 = 1
        multiply set and unset valus we get the hamming wt of 1st bit position
        hamming wt = set * unset = 2 * 1 = 2
    1.  Lets try to find in the given array how many elements have 2nd bit set
        set = 2 -- unset = N-set = 3-2 = 1
        multiply set and unset valus we get the hamming wt of 2nd bit position
        hamming wt = set * unset = 2 * 1 = 2

        Adding hamming wt's = 0 + 2 + 2 = 4 -- only one side to get total
        multiply by 2 we get hamming wt = 4 * 2 = 8;

        TC = O(Log(Int_maxval) * N) || SC = O(1)
        */
        long sum = 0;
        int N = A.length;
        long mod = 1000000007;
        //Iterate over all bit positions
        for(int i = 0; i < 31; i++){
            //x will store total no of set bits at i'th bit position
            int x = 0;
            //Iterate over the array and check if element hast set bit at i'th pos
            //if yst increase the x count.
            for(int j = 0; j < A.length; j++){
                if(checkBit(A[j], i))
                    x++;
            }
        //  sum +=   (2 *set*unset) == to obtatin hamming wt at ith bit position.
            sum += ((2L * x * (N - x))%mod);
            //Now check if sum is greater than mod value then substract mod val from sum
            //this will maintain our answer 
            //in specified bounds.
            if(sum > mod)
                sum = sum - mod;
        }
        return (int)(sum);
    }

    public boolean checkBit(int num, int pos){
        return (num & (1 << pos)) > 0 ? true : false;
    }
}
