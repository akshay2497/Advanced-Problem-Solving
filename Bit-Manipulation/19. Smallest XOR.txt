Problem Description

Given two integers A and B, find a number X such that A xor X is minimum possible, and the number of set bits in X equals B.



Problem Constraints

0 <= A <= 109
0 <= B <= 30



Input Format

First argument contains a single integer A. Second argument contains a single integer B.



Output Format

Return a single integer X.



Example Input

Input 1:

 A = 3
 B = 3
Input 2:

 A = 15
 B = 2


Example Output

Output 1:

 7
Output 2:

 12


Example Explanation

Explanation 1:

 3 xor 7 = 4 which is minimum
Explanation 2:

 15 xor 12 = 3 which is minimum
 
 //Java
 
 public class Solution {
    public int solve(int A, int B) {
        /*
        e.g
        1st case : if no of set bits in A are greater than B value.
        A = 15, B = 2
        A = 0 1 1 1 1 --total set Bits are 4 but we want 2 set bits in x as B = 2
                        If we look carefully if we set bits in X from MSB side we get minimum xor value
        A = 0 1 1 1 1
      ^ X = 0 1 1 0 0 == 12
-----------------------
ans =       0 0 0 1 1 == 3
        2nd case : If no of set bits in A are less than equal to B value
        A = 10 B = 3
        A = 1 0 1 0
      ^ X = 1 0 1 1 == 11
-----------------------
ans =       0 0 0 1 == 1 
        In this case we need to set bits in X at same position A has also we need to set extra bits
        remaining bits from LSB side to get the minimum value.

        TC = O(Log(A) + B) || SC = O(1)
        */
        //Edge case
        if(B == 0)
            return 0;
        int X = A;
        int countSetBitsInA = 0;
        //1.Count total no of set bits in A.
        for(int i = 0; i < 31; i++){
            if(checkBit(A, i))
                countSetBitsInA++;
        }
        
        int count = 0;
        X = 0;
        //2.Check if Bits in A greater than A then set bits in X from MSB side whenever
        //we reach to B break the loop.
        if(countSetBitsInA >= B){
            for(int i = 30; i >= 0; i--){
                if(checkBit(A, i)){
                    X = (X | (1 << i));
                    count++;
                    if(count == B)
                        break;
                }
            }
        }else{
        //3.If set bits in A less than B then make X equal to A this will set B-countSetBitsInA bits in X 
        //Now to addd remaing extra bits set the bits from LSB side to get the minimum XOR value.
            X = A;
            count = countSetBitsInA;
            for(int i = 0; i < 31; i++){
                if(!checkBit(A, i)){
                    X = (X | (1 << i));
                    count++;
                    if(count == B)
                        break;
                }
            }
        }
        //Return the answer
        return X;

    }

    public boolean checkBit(int num, int pos){
        return (num & (1 << pos)) > 0 ? true : false;
    }
}
