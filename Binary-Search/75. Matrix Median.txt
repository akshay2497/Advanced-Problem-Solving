Problem Description
Given a matrix of integers A of size N x M in which each row is sorted.

Find and return the overall median of matrix A.

NOTE: No extra memory is allowed.

NOTE: Rows are numbered from top to bottom and columns are numbered from left to right.



Problem Constraints
1 <= N, M <= 10^5

1 <= N*M <= 10^6

1 <= A[i] <= 10^9

N*M is odd



Input Format
The first and only argument given is the integer matrix A.



Output Format
Return the overall median of matrix A.



Example Input
Input 1:

A = [   [1, 3, 5],
        [2, 6, 9],
        [3, 6, 9]   ] 
Input 2:

A = [   [5, 17, 100]    ]


Example Output
Output 1:

 5 
Output 2:

 17


Example Explanation
Explanation 1:

A = [1, 2, 3, 3, 5, 6, 6, 9, 9]
Median is 5. So, we return 5. 
Explanation 2:

Median is 17.


//Java

public class Solution {
    public int findMedian(int[][] A) {
        /*
        We cannot use extra memory, so we canâ€™t store all elements in an array and sort the array.
        But since rows are sorted, it must be of some use, right?

        Note that in a row, you can binary search to find how many elements are smaller than a value X 
        in O(log M).
        This is the base of our solution.

        Say k = N*M/2. We need to find (k + 1)^th smallest element.
        We can use binary search on the answer. In O(N log M), we can count how many elements are smaller 
        than X in the matrix.

        So, we use binary search on the interval [1, INT_MAX]. So, the total complexity is O(30 * N log M).

        Note:
        This problem can be solved by using a min-heap, but extra memory is not allowed.
        */
        int no_of_row = A.length;
        int no_of_col = A[0].length;
        int high = A[0][no_of_col-1];
        int low = A[0][0];
        int ans = 0;
        for(int i=0; i<no_of_row; i++)
        {
            if(low > A[i][0])
                low = A[i][0];
        }
        for(int i=0; i<no_of_row; i++)
        {
            if(high < A[i][no_of_col-1])
                high = A[i][no_of_col-1];
        }
        int medium = ((no_of_row*no_of_col)>>1)+1;
        while(low<=high)
        {
            int mid = (low+high)>>1;
            int count = 0;
            for(int i=0; i<no_of_row; i++)
            {
                count += binarySearch(A, i, 0, no_of_col-1, mid);
            }
            if(count < medium)
                low = mid+1;
            else
            {
                ans = mid;
                high = mid-1;
            }
        }
        return ans;
    }

    int binarySearch(int[][] A, int row_no, int start, int end, int target)
    {
        int count = 0;
        while(start<=end)
        {
            int mid = (start+end)>>1;
            if(A[row_no][mid] <= target)
            {
                count = mid+1;
                start = mid+1;
            }
            else
            {
                end = mid-1;
            }
        }
        return count;
    }
}