Problem Description
Given a bitonic sequence A of N distinct elements, write a program to find a given element B in the bitonic sequence in O(logN) time.

NOTE:

A Bitonic Sequence is a sequence of numbers which is first strictly increasing then after a point strictly decreasing.


Problem Constraints
3 <= N <= 105

1 <= A[i], B <= 108

Given array always contain a bitonic point.

Array A always contain distinct elements.



Input Format
First argument is an integer array A denoting the bitonic sequence.

Second argument is an integer B.



Output Format
Return a single integer denoting the position (0 index based) of the element B in the array A if B doesn't exist in A return -1.



Example Input
Input 1:

 A = [3, 9, 10, 20, 17, 5, 1]
 B = 20
Input 2:

 A = [5, 6, 7, 8, 9, 10, 3, 2, 1]
 B = 30


Example Output
Output 1:

 3
Output 2:

 -1


Example Explanation
Explanation 1:

 B = 20 present in A at index 3
Explanation 2:

 B = 30 is not present in A


//Java


public class Solution {
    public int solve(int[] A, int B) {
        int peak = findpeak(A);
        int ascSearch = bsAsc(A, 0, peak, B);
        int descSearch = bsDesc(A, peak+1, A.length-1, B);
        return ascSearch == -1 ? descSearch : ascSearch;
    }

    public int bsDesc(int[] A, int low, int high, int k){
        while(low <= high){
            int mid = (low + high) / 2;
            if(A[mid] == k)
                return mid;
            if(A[mid] > k)
                low = mid+1;
            else
                high = mid-1;
        }
        return -1;
    }

    public int bsAsc(int[] A, int low, int high, int k){
        while(low <= high){
            int mid = (low + high) / 2;
            if(A[mid] == k)
                return mid;
            if(A[mid] < k)
                low = mid+1;
            else
                high = mid-1;
        }
        return -1;
    }

    public int findpeak(int[] A){
        int n = A.length;
        if(A[0] > A[1])
            return 0;
        if(A[n-1] > A[n-2])
            return n-1;
        
        int low = 1, high = n-2;
        while(low <= high){
            int mid = (low + high) / 2;
            if(A[mid-1] < A[mid] && A[mid] > A[mid+1])
                return mid;
            else if(A[mid] < A[mid+1])
                low = mid + 1;
            else
                high = mid - 1;
        }
        return -1;
    }
}
