Given three sorted arrays A, B and Cof not necessarily same sizes.

Calculate the minimum absolute difference between the maximum and minimum number from the triplet a, b, c such that a, b, c belongs arrays A, B, C respectively. i.e. minimize | max(a,b,c) - min(a,b,c) |.

Example :

Input:

A : [ 1, 4, 5, 8, 10 ]
B : [ 6, 9, 15 ]
C : [ 2, 3, 6, 6 ]
Output:

1
Explanation: We get the minimum difference for a=5, b=6, c=6 as | max(a,b,c) - min(a,b,c) | = |6-5| = 1.


//Java


public class Solution {
    public int solve(int[] A, int[] B, int[] C) {
        int p1 = 0, p2 = 0, p3 = 0;
        int n = A.length, m = B.length, o = C.length;
        int ans = Integer.MAX_VALUE;
        while(p1 < n && p2 < m && p3 < o){
            int max = Math.max(Math.max(A[p1], B[p2]), C[p3]);
            int min = Math.min(Math.min(A[p1], B[p2]), C[p3]);
            int diff = Math.abs(max - min);

            if(diff < ans){
                ans = diff;
            }

            if(A[p1] <= B[p2] && A[p1] <= C[p3])
                p1++;
            else if(B[p2] <= A[p1] && B[p2] <= C[p3])
                p2++;
            else
                p3++;
        }
        return ans;
    }
}
