Problem Description

Given an array of integers A of size N that is a permutation of [0, 1, 2, …, (N-1)]. It is allowed to swap any two elements (not necessarily consecutive).

Find the minimum number of swaps required to sort the array in ascending order.



Problem Constraints

1 <= N <= 100000
0 <= A[i] < N



Input Format

The only argument given is the integer array A.



Output Format

Return the minimum number of swaps.



Example Input

Input 1:

A = [1, 2, 3, 4, 0]
Input 2:

A = [2, 0, 1, 3]


Example Output

Output 1:

4
Output 2:

2


Example Explanation

Explanation 1:

 If you swap (1, 2) -> (2, 3) -> (4, 0) -> (3, 0). You will get a sorted array.
 You cannot sort it with lesser swaps.
Explanation 2:

 You cannot sort it with lesser than 2 swaps.
 
 //Java
 
 public class Solution {
    public int solve(int[] A) {
        /*
        Suppose we have array A=[A0, A1, A2… ]
        Now, let’s keep iterating over this array, and if Ai != i, We swap A[i] with 
        index A[A[i]] (that’s where Ai belongs). else if A[i]==i then increase i.
        Example:

        [4, 0, 1, 3, 2]
        swap_index(A[0],A[4]) -> swap_index(A[0],A[2]) -> swap_index(A[0],A[1]) (3 swaps)
        In the end after each swapping increase the swaps count

        TC = O(N) || SC = O(1)
        */
        int i = 0, swaps = 0, n = A.length;
        while(i < n){
            //No need to swap if element is equal to index value
            //ignore the indx and incremnt i
            if(i == A[i]){
                i++;
            }else{
            //else swap A[i] with A[A[i]] and increment swaps count
                swap(A, i, A[i]);
                swaps++;
            }
            //Do this till i < n then return swaps count
        }
        return swaps;
    }
    public void swap(int[] arr, int idx1, int idx2){
        //arr[idx1] == arr[i];
        //arr[idx2] == arr[arr[i]];
        int temp = arr[idx1];
        arr[idx1] = arr[idx2];
        arr[idx2] = temp;
    }
}
