Problem Description
Given a matrix of integers A of size N x M and multiple queries Q, for each query, find and return the submatrix sum.

Inputs to queries are top left (b, c) and bottom right (d, e) indexes of submatrix whose sum is to find out.

NOTE:

Rows are numbered from top to bottom, and columns are numbered from left to right.
Sum may be large, so return the answer mod 109 + 7.


Problem Constraints
1 <= N, M <= 1000
-100000 <= A[i] <= 100000
1 <= Q <= 100000
1 <= B[i] <= D[i] <= N
1 <= C[i] <= E[i] <= M



Input Format
The first argument given is the integer matrix A.
The second argument given is the integer array B.
The third argument given is the integer array C.
The fourth argument given is the integer array D.
The fifth argument given is the integer array E.
(B[i], C[i]) represents the top left corner of the i'th query.
(D[i], E[i]) represents the bottom right corner of the i'th query.



Output Format
Return an integer array containing the submatrix sum for each query.



Example Input
Input 1:

 A = [   [1, 2, 3]
         [4, 5, 6]
         [7, 8, 9]   ]
 B = [1, 2]
 C = [1, 2]
 D = [2, 3]
 E = [2, 3]
Input 2:

 A = [   [5, 17, 100, 11]
         [0, 0,  2,   8]    ]
 B = [1, 1]
 C = [1, 4]
 D = [2, 2]
 E = [2, 4]


Example Output
Output 1:

 [12, 28]
Output 2:

 [22, 19]


Example Explanation
Explanation 1:

 For query 1: Submatrix contains elements: 1, 2, 4 and 5. So, their sum is 12.
 For query 2: Submatrix contains elements: 5, 6, 8 and 9. So, their sum is 28.
Explanation 2:

 For query 1: Submatrix contains elements: 5, 17, 0 and 0. So, their sum is 22.
 For query 2: Submatrix contains elements: 11 and 8. So, their sum is 19.
 
 //Java
 
 public class Solution {
    public int[] solve(int[][] A, int[] B, int[] C, int[] D, int[] E) {
        /*
        The idea is to first create an auxiliary matrix arr[N+1][M+1] such that arr[i][j] 
        stores sum of elements in submatrix from (0,0) to (i,j).
        Once arr[][] is constructed, we can compute sum of submatrix between (x1, y1) and 
        (x2, y2) in O(1) time.
        We need to consider arr[x2][y2] and subtract all unnecessary elements.
        Below is the complete expression to compute the submatrix sum in O(1) time.

        Sum between (x1, y1) and (x2, y2) is,
        arr[x2][y2] - arr[x2][y1-1] - arr[x1-1][y2] + arr[x1-1][y1-1]

        The submatrix aux[x1-1][x2-1] is added because elements of it are subtracted twice.
        Remember to return the ans%1000000007

        * TC = O(N*M+Q)
        */
        int N = A.length;
        int M = A[0].length;
        long[][] pf = new long[N][M];
        //Create prefix matrix 
        //Insert values rowwise
        for(int i = 0; i < N; i++){
            pf[i][0] = A[i][0];
            for(int j = 1; j < M; j++){
                pf[i][j] = pf[i][j-1] + A[i][j]; 
            }
        }
        //Inset values columnwise
        for(int i = 0; i < M; i++){
            pf[0][i] = pf[0][i];
            for(int j = 1; j < N; j++){
                pf[j][i] = pf[j-1][i] + pf[j][i]; 
            }
        }
        long mod = 1000000007;
        //ans array to store answers of all queries
        int[] ans = new int[B.length];
        //Iterate over the array
        for(int i = 0; i < B.length; i++){
            //Read TL(a1, b1) and BR(a2, b2) values from the queries arays
            int a1 = B[i]-1, b1 = C[i]-1;
            int a2 = D[i]-1, b2 = E[i]-1;
            //Take sum variable to store the sum and add prefix sum at BR position
            long sum = pf[a2][b2]%mod;
            //Then checks to avoide Index out of bounds exceptions
            if(b1 > 0)
                //Substract prefix sum till BL position of given matrix from overall sum.
                sum = (sum - pf[a2][b1-1])%mod;

            if(a1 > 0)
                //Substract prefix sum till TR position of given matrix from overall sum.
                sum = (sum - pf[a1-1][b2])%mod;
            
            if(a1 > 0 && b1 > 0)
                //While substarcting if we removed TL(0,0) to BR(a1-1, b1-1) part twice 
                //so add it again
                sum = (sum + pf[a1-1][b1-1])%mod;
            //Add sum to ans array but in case of java mod to negative value gives 
            //a negative answer so to avoide that add mod value to sum and then mod it again 
            ans[i] = (int)((sum+mod)%mod);
        }
        //Return the answer array
        return ans;
        //TC = O(N*M+Q) || SC = O(N*M)
    }
}
