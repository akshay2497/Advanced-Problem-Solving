Problem Description

Given a collection of intervals, merge all overlapping intervals.



Problem Constraints

1 <= Total number of intervals <= 100000.



Input Format

First argument is a list of intervals.



Output Format

Return the sorted list of intervals after merging all the overlapping intervals.



Example Input

Input 1:

[1,3],[2,6],[8,10],[15,18]


Example Output

Output 1:

[1,6],[8,10],[15,18]


Example Explanation

Explanation 1:

Merge intervals [1,3] and [2,6] -> [1,6].
so, the required answer after merging is [1,6],[8,10],[15,18].
No more overlapping intervals present.

//Java

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */

public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        //Sort the Intervals using custom comparator according to 
        //intervals start values
        Collections.sort(intervals, (Interval i1, Interval i2) ->{
            return i1.start-i2.start;
        });
        //Create a result arrayList
        ArrayList<Interval> arr = new ArrayList<>();
        //Add the first interval of given arrayList to result arrayList
        arr.add(intervals.get(0));
        //Keep j pointer to maintain the result arrays current index
        int j = 0;
        //Iterate over the intervals list from 1 to N
        for(int i = 1; i < intervals.size(); i++){
            //Fist condition is if end of j'th interval is greater than 
            //start of i'th interval then that interval is overlapping
            //so update the j'th intervals end position with max end value 
            //beetween i'th end and j'th end value,
            if(arr.get(j).end >= intervals.get(i).start){
                arr.get(j).end = Math.max(intervals.get(i).end, arr.get(j).end);
            }else{
            //If intervals are not overlapping then add given arrays current interval
            //entru to result arrayList and increase the j pointer
                arr.add(intervals.get(i));
                j++;
            }
        }
        return arr;
        //TC = O(N*LogN + N) for sorting and additional N for iterating again|| SC = O(1)
    }
}
