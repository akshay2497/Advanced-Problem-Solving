Problem Description

Given a vector A of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.



Problem Constraints

1 <= |A| <= 100000



Input Format

First and only argument is the vector A



Output Format

Return one integer, the answer to the question



Example Input

Input 1:

A = [0, 1, 0, 2]
Input 2:

A = [1, 2]


Example Output

Output 1:

1
Output 2:

0


Example Explanation

Explanation 1:

1 unit is trapped on top of the 3rd element.
Explanation 2:

No water is trapped.

//Java

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int trap(final int[] A) {
        /*
        This is a classic example for how effectively preprocessing can be used in
        problem solving.
        Apporoach:-
        1.  Create a prefix max and suffix max array
        2.  And then traverse over the array find out min height between leftmax and rightmax.
        3.  Substract the current element from min height.
        4.  If it is greater than 0 then add it to the ans else skip that value.
        5.  TC = O(N) || SC = O(N)  
        */
        int[] pfr = new int[A.length];
        pfr[A.length-1] = A[A.length-1];
        for(int i = A.length - 2; i >= 0; i--){
            pfr[i] = Math.max(A[i],pfr[i+1]);
        }
        int ans = 0;
        int leftmax = A[0];
        for(int i = 1; i < A.length-1; i++){
            int rightmax = pfr[i+1];
            int minht = Math.min(leftmax, rightmax);
            int val = minht - A[i];
            if(val < 0)
                val = 0;
            ans += val;
            leftmax = Math.max(A[i], leftmax);
        }

        return ans;
    }
}
