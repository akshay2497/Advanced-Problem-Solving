Problem Description

Given an array of integers A and an integer B, find and return the minimum number of swaps required to bring all the numbers less than or equal to B together.

Note: It is possible to swap any two elements, not necessarily consecutive.



Problem Constraints

1 <= length of the array <= 100000
-109 <= A[i], B <= 109



Input Format

The first argument given is the integer array A.
The second argument given is the integer B.



Output Format

Return the minimum number of swaps.



Example Input

Input 1:

 A = [1, 12, 10, 3, 14, 10, 5]
 B = 8
Input 2:

 A = [5, 17, 100, 11]
 B = 20


Example Output

Output 1:

 2
Output 2:

 1


Example Explanation

Explanation 1:

 A = [1, 12, 10, 3, 14, 10, 5]
 After swapping  12 and 3, A => [1, 3, 10, 12, 14, 10, 5].
 After swapping  the first occurence of 10 and 5, A => [1, 3, 5, 12, 14, 10, 10].
 Now, all elements less than or equal to 8 are together.
Explanation 2:

 A = [5, 17, 100, 11]
 After swapping 100 and 11, A => [5, 17, 11, 100].
 Now, all elements less than or equal to 20 are together.
 
 //Java
 
 public class Solution {
    public int solve(int[] A, int B) {
        /*
        Approach : Sliding Window
        First, we will find the number of elements that are less than or equal to B. 
        Let the count comes out to be X.
        We know that we need at most X-1 swaps to make all X elements to be consecutive.
        Maintain a window of X and check how many elements we need to swap so that all X 
        elements come in that window.
        We store the minimum of all that and return that.
        */
        //Take count of elements <= B in array
        int maxcount = 0;
        for(int i = 0; i < A.length; i++){
            if(A[i] <= B)
                maxcount++;
            
        }
        //Take maxele variable
        int maxele = 0; 
        int ans = 0;
        //Take wimdow of size equal to no of elements less than or equal to B.
        //If element in current window is greater than B then increase maxele count.
        //The maxele count will give us total swaps required in current window.
        for(int i = 0; i < maxcount; i++){
            if(A[i] > B)
                maxele++;
        }
        //Update answer with maxele count.
        ans = maxele;
        //Now iterate over the array from 1 to N-Window_length
        for(int i = 1; i <= A.length - maxcount; i++){
            //Check if newly added element in window is greater than B or not if yes then 
            //increase the maxele count.
            if(A[i+maxcount-1] > B){
                maxele++;
            }
            //Now check element which is now out of window is greater than B or not if yes
            //then decrease the maxele count. 
            if(A[i-1] > B){
                maxele--;
            }
            //Update the ans if current maxele count is lesser then previous answer
            //In this way we will get minium swaps required
            ans = Math.min(ans, maxele);
        }
        return ans;
        //TC = O(N) || SC = O(1)
    }
}

 
