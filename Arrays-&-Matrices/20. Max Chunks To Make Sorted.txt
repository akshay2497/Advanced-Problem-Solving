Problem Description
Given an array of integers A of size N that is a permutation of [0, 1, 2, ..., (N-1)], if we split the array into some number of "chunks" (partitions), and individually sort each chunk. After concatenating them in order of splitting, the result equals the sorted array.

What is the most number of chunks we could have made?



Problem Constraints
1 <= N <= 100000
0 <= A[i] < N



Input Format
The only argument given is the integer array A.



Output Format
Return the maximum number of chunks that we could have made.



Example Input
Input 1:

 A = [1, 2, 3, 4, 0]
Input 2:

 A = [2, 0, 1, 3]


Example Output
Output 1:

 1
Output 2:

 2


Example Explanation
Explanation 1:

 A = [1, 2, 3, 4, 0]
 To get the 0 in the first index, we have to take all elements in a single chunk.
Explanation 2:

 A = [2, 0, 1, 3] 
 We can divide the array into 2 chunks.
 First chunk is [2, 0, 1] and second chunk is [3].
 
 //Java
 
 public class Solution {
    public int solve(ArrayList<Integer> A) {
        /*
        Approach:-
        ex.
        arr = {1, 2, 0, 3, 5, 4}
        As per the problem array can have elements form 0 to N-1
        The idea is to maintain a maxelement variable which will contin maxele till current index
        and observe the array behavior.
        indices = 0 1 2 3 4 5
        arr     = 1 2 0 3 5 4
        maxele  = 1 2 2 3 5 5
        if you see carefully whenever we are encountering a situation where maxele equal to index that
        is the min chunk we need to make that subarray sorted.
        And after concatinating these sorted parts we will get array we needed
        */
        int maxele = Integer.MIN_VALUE, chunks = 0;
        for(int i = 0; i < A.size(); i++){
            maxele = Math.max(maxele, A.get(i));
            if(maxele == i)
                chunks++;
        }
        return chunks;
    }
}
