Problem Description
Given a non-negative number represented as an array of digits, add 1 to the number ( increment the number represented by the digits ).

The digits are stored such that the most significant digit is at the head of the list.

NOTE: Certain things are intentionally left unclear in this question which you should practice asking the interviewer. For example: for this problem, the following are some good questions to ask :

Q: Can the input have 0's before the most significant digit. Or, in other words, is 0 1 2 3 a valid input?
A: For the purpose of this question, YES
Q: Can the output have 0's before the most significant digit? Or, in other words, is 0 1 2 4 a valid output?
A: For the purpose of this question, NO. Even if the input has zeroes before the most significant digit.


Problem Constraints
1 <= size of the array <= 1000000



Input Format
First argument is an array of digits.



Output Format
Return the array of digits after adding one.



Example Input
Input 1:

[1, 2, 3]


Example Output
Output 1:

[1, 2, 4]


Example Explanation
Explanation 1:

Given vector is [1, 2, 3].
The returned vector should be [1, 2, 4] as 123 + 1 = 124.

//Java

public class Solution {
    public ArrayList<Integer> plusOne(ArrayList<Integer> A) {
        int i = A.size()-1;
        //Add 1 to last element of array
        int sum = A.get(i) + 1;
        //Set the last elemt of array by sum % 0
        //eg: if last element is 9 by adding 1 it will become 10 here we need to put
        //only zero to the last elements position so mod it by 10 and add it to last index
        A.set(i, sum % 10);
        //if the sum becomes 10 then we need to maintain the carray value which will
        //be added to the next elements
        int carry = sum / 10;
        //Iterate over the loop in reverse order
        //till carry != 0 and i >= 0
        //Do the same process as we done before in the loop
        while(carry != 0 && --i >= 0){
            sum = A.get(i) + carry;
            A.set(i, sum % 10);
            carry = sum / 10;
        }
        //if carry is not 0 then add it to first index
        if(carry != 0)
            A.add(0, carry);
        //if there are trailing 0's present remove them
        while(A.get(0) == 0)
            A.remove(0);
        //Return the modified ArrayList.
        return A;
        //TC = O(N) | SC = O(1)
    }
}
