Problem Description
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.



Problem Constraints
0 <= |intervals| <= 105



Input Format
First argument is the vector of intervals

second argument is the new interval to be merged



Output Format
Return the vector of intervals after merging



Example Input
Input 1:

Given intervals [1, 3], [6, 9] insert and merge [2, 5] .
Input 2:

Given intervals [1, 3], [6, 9] insert and merge [2, 6] .


Example Output
Output 1:

 [ [1, 5], [6, 9] ]
Output 2:

 [ [1, 9] ]


Example Explanation
Explanation 1:

(2,5) does not completely merge the given intervals
Explanation 2:

(2,6) completely merges the given intervals

//Java

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    /*
    eg. intervals = [[1,3], [6,9]] newInterval = [2,5]
        ans = []
        1st itr-
        newInterval = [1,5] ans = []
        2nd itr
        newintervals end < curr elements start so add newInterval int ans array
        ans = [[1, 5]] but now we need to add remaining intervals
        ans = [[1,5], [6,9]]
    
    eg. intervals = [[1,3], [6,9]] newInterval = [2,6]
        ans = []
        1st itr-
        No condition satisfying
        newInterval = [1, 6]
        2nd itr-
        No condition satisfying
        newInterval = [1, 9]
        came out of the loop now add new interval to answer
        ans = [[1,9]]
    TC = O(N) || SC = O(1)
    */
    public ArrayList<Interval> insert(ArrayList<Interval> intervals, Interval newInterval) {
        ArrayList<Interval> ans = new ArrayList<>();
        for(int i = 0; i < intervals.size(); i++){
            //If newInterval start is > than curr intervals end that means it's not overlapping
            //so add curr interval into ans.
            if(newInterval.start > intervals.get(i).end)
                ans.add(intervals.get(i));
            //If newintervals end is less than curr intervals start that means we need to add 
            //newinterval in the answer array at current position and then we can add all remaining intervals
            //and return the answer. 
            else if(newInterval.end < intervals.get(i).start){
                ans.add(newInterval);
                for(int j = i; j < intervals.size(); j++){
                    ans.add(intervals.get(j));
                }
                return ans;
            }
            //If above cases are not satisfying then it means overlap is happning so for merging
            //the intervals update newintervals start value between min of curr intervals start and 
            //newintervals start. as well as update newintervals end beetween max of newintervals end and
            //curr elements end and repeate the process.
            else{
                newInterval.start = Math.min(newInterval.start, intervals.get(i).start);
                newInterval.end = Math.max(newInterval.end, intervals.get(i).end);
            }
        }
        //If we come out of the loop that means newInterval is overlapping all intervals in given ArrayList
        //so add the newInterval in ans array and return.
        ans.add(newInterval);
        return ans;
    }
}
