Problem Description
Given an array, A of integers of size N. Find the maximum value of j - i such that A[i] <= A[j].



Problem Constraints
1 <= N <= 105

-109 <= A[i] <= 109



Input Format
First argument is an integer array A of size N.



Output Format
Return an integer denoting the maximum value of j - i.



Example Input
Input 1:

A = [3, 5, 4, 2]


Example Output
Output 1:

2


Example Explanation
Explanation 1:

For A[0] = 3 and A[2] = 4, the ans is (2 - 0) = 2. 

//Java

public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int maximumGap(final List<Integer> A) {
        /*
        The approch is really simple.
        1.  Let's think in direct haw can we find maximum value for j'th
            index, we can create a class which can store element of array as key
            and its index as value, and we sort that collection of pairs then
            we can get the maximum element of an array with its actual index.
            Note:- If we directly sort the array original indexes of elements will
                   be lost, so to maintain the indexes we are using a new collection.
        2.  After sorting the collection we can get index of maximum elent in the array
            store it in maxj variable.
        3.  Init ans variable with 0.
        4.  Iterate over the collection pair collection in reverse direction and update the
            ans variable if current maxj minus current element's index is greater then 
            previous answer.
        5.  also check if current elements index is greater than maxj then update maxj
            variable.
        6.  Repeat this process until collection is exausted.
        7.  Finally return the answer.
        8.  TC = O(NlogN + N) || SC = O(N + logN)
        eg. 
            indexes   0 1 2 3 
            elements  3 5 4 2
        
        collection = [[3,0], [5,1], [4,2], [2,3]]
        sorting =    [[2,3], [3,0], [4,2], [5,1]]

        maxj = [5,1] == 1
        ans = 0

        itr1-
        ans = max(ans, maxj-arr[i].val) = max(0, 1-1) = 0
        maxj = max(maxj, arr[i].val) = max(1,1) = 1

        itr2-
        ans = max(ans, maxj-arr[i].val) = max(0, 1-2) = 0
        maxj = max(maxj, arr[i].val) = max(1,2) = 2

        itr3-
        ans = max(ans, maxj-arr[i].val) = max(0, 2-0) = 2
        maxj = max(maxj, arr[i].val) = max(2,0) = 2

        itr4-
        ans = max(ans, maxj-arr[i].val) = max(0, 2-3) = 2
        maxj = max(maxj, arr[i].val) = max(2,3) = 3

        Finally return answer as 2
        */
        ArrayList<Pair> arr = new ArrayList<>();
        for(int i = 0; i < A.size(); i++){
            arr.add(new Pair(A.get(i), i));
        }
        
        Collections.sort(arr, (Pair a, Pair b) ->{
            return a.key-b.key;
        });
        
        int maxj = arr.get(arr.size() - 1).val;

        int ans=0;
        for(int i = arr.size()-1; i >= 0; i--){
            ans = Math.max(ans, maxj-arr.get(i).val);
            maxj = Math.max(maxj, arr.get(i).val);
        }

        return ans;

    }
}

class Pair{
    int key;
    int val;
    public Pair(int key, int val){
        this.key = key;
        this.val = val;
    }
}

