Problem Description
A linked list A is given such that each node contains an additional random pointer which could point to any node in the list or NULL.

Return a deep copy of the list.



Problem Constraints
0 <= |A| <= 106



Input Format
The first argument of input contains a pointer to the head of linked list A.



Output Format
Return a pointer to the head of the required linked list.



Example Input
Given list
   1 -> 2 -> 3
with random pointers going from
  1 -> 3
  2 -> 1
  3 -> 1
  


Example Output
   1 -> 2 -> 3
with random pointers going from
  1 -> 3
  2 -> 1
  3 -> 1
  


Example Explanation
You should return a deep copy of the list. The returned answer should not contain the same node as the original list, but a copy of them. The pointers in the returned list should not link to any node in the original input list.



//Java


/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        //Generating head of the copy List
        RandomListNode trav = head;
        RandomListNode head2 = new RandomListNode(head.label);
        head2.next = head.next;
        head.next = head2;
        trav = trav.next.next;
        //Creating new Nodes in between original list 
        while(trav != null){
            RandomListNode temp = new RandomListNode(trav.label);
            temp.next = trav.next;
            trav.next = temp;
            trav = trav.next.next;
        }

        //Attaching rndom pointers
        RandomListNode t1 = head, t2 = head2;
        while(t1 != null){
            if(t1.random != null)
                t2.random = t1.random.next;
            t1 = t1.next.next;
            if(t2.next != null)
                t2 = t2.next.next;
        }

        //Saperating both the lists
        t1 = head;
        t2 = head2;
        while(t1 != null){
            t1.next = t2.next;
            t1 = t1.next;
            if(t1 != null)
                t2.next = t1.next;
            t2 = t2.next;
        }

        return head2;
    }
}
