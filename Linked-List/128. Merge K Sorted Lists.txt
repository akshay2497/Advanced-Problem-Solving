Problem Description
Given a list containing head pointers of N sorted linked lists.
Merge these given sorted linked lists and return them as one sorted list.



Problem Constraints
1 <= total number of elements in given linked lists <= 100000



Input Format
The first and only argument is a list containing N head pointers.



Output Format
Return a pointer to the head of the sorted linked list after merging all the given linked lists.



Example Input
Input 1:

 1 -> 10 -> 20
 4 -> 11 -> 13
 3 -> 8 -> 9
Input 2:

 10 -> 12
 13
 5 -> 6


Example Output
Output 1:

 1 -> 3 -> 4 -> 8 -> 9 -> 10 -> 11 -> 13 -> 20
Output 2:

 5 -> 6 -> 10 -> 12 ->13


Example Explanation
Explanation 1:

 The resulting sorted Linked List formed after merging is 1 -> 3 -> 4 -> 8 -> 9 -> 10 -> 11 -> 13 -> 20.
Explanation 2:

 The resulting sorted Linked List formed after merging is 5 -> 6 -> 10 -> 12 ->13.


//Java


//This can also be done by applying MergeSort on Lists


/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ArrayList<ListNode> a) {
        PriorityQueue<ListNode> minHeap = new PriorityQueue<>((x, y) -> {
            return x.val - y.val;
        });
        
        ListNode dummy = new ListNode(0);
        for (ListNode l : a) {
            if (l != null) {
                minHeap.add(l);
            }
        }
        ListNode cur = dummy;
        while (!minHeap.isEmpty()) {
            ListNode node = minHeap.remove();
            cur.next = node;
            cur = cur.next;
            if (node.next != null) {
                minHeap.add(node.next);
            }
        }
        return dummy.next;
	}
    //Brute force
	// public ListNode mergeKLists(ArrayList<ListNode> a) {
    //     ListNode head = a.get(0);
    //     int n = a.size();
    //     for(int i = 1; i < n; i++){
    //         head = mergeTwoLists(head, a.get(i));
    //     }
    //     return head;
	// }
    // public ListNode mergeTwoLists(ListNode h1, ListNode h2) {
    //     if(h1 == null)
    //         return h2;
    //     if(h2 == null)
    //         return h1;
    //     ListNode h3 = null, trav = null;
    //     if(h1.val < h2.val){
    //         h3 = h1;
    //         trav = h1;
    //         h1 = h1.next;
    //     }else{
    //         h3 = h2;
    //         trav = h2;
    //         h2 = h2.next;
    //     }

    //     while(h1 != null && h2 != null){
    //         if(h1.val < h2.val){
    //             trav.next = h1;
    //             h1 = h1.next;
    //         }else{
    //             trav.next = h2;
    //             h2 = h2.next;
    //         }
    //         trav = trav.next;
    //     }

    //     if(h1 == null)
    //         trav.next = h2;
    //     if(h2 == null)
    //         trav.next = h1;
    //     return h3;
    // }
}
