Problem Description
Merge two sorted linked lists, A and B, and return it as a new list.

The new list should be made by splicing together the nodes of the first two lists and should also be sorted.



Problem Constraints
0 <= |A|, |B| <= 105



Input Format
The first argument of input contains a pointer to the head of linked list A.

The second argument of input contains a pointer to the head of linked list B.



Output Format
Return a pointer to the head of the merged linked list.



Example Input
Input 1:

 A = 5 -> 8 -> 20
 B = 4 -> 11 -> 15
Input 2:

 A = 1 -> 2 -> 3
 B = Null


Example Output
Output 1:

 4 -> 5 -> 8 -> 11 -> 15 -> 20
Output 2:

 1 -> 2 -> 3


Example Explanation
Explanation 1:

 Merging A and B will result in 4 -> 5 -> 8 -> 11 -> 15 -> 20 
Explanation 2:

 We don't need to merge as B is empty. 


//Java


/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode h1, ListNode h2) {
        if(h1 == null)
            return h2;
        if(h2 == null)
            return h1;
        ListNode h3 = null, trav = null;
        if(h1.val < h2.val){
            h3 = h1;
            trav = h1;
            h1 = h1.next;
        }else{
            h3 = h2;
            trav = h2;
            h2 = h2.next;
        }

        while(h1 != null && h2 != null){
            if(h1.val < h2.val){
                trav.next = h1;
                h1 = h1.next;
            }else{
                trav.next = h2;
                h2 = h2.next;
            }
            trav = trav.next;
        }

        if(h1 == null)
            trav.next = h2;
        if(h2 == null)
            trav.next = h1;
        return h3;
    }
}
