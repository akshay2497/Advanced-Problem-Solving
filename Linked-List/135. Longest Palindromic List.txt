Problem Description
Given a linked list of integers. Find and return the length of the longest palindrome list that exists in that linked list.

A palindrome list is a list that reads the same backward and forward.

Expected memory complexity : O(1)



Problem Constraints
1 <= length of the linked list <= 2000

1 <= Node value <= 100



Input Format
The only argument given is head pointer of the linked list.



Output Format
Return the length of the longest palindrome list.



Example Input
Input 1:

 2 -> 3 -> 3 -> 3
Input 2:

 2 -> 1 -> 2 -> 1 ->  2 -> 2 -> 1 -> 3 -> 2 -> 2


Example Output
Output 1:

 3
Output 2:

 5


Example Explanation
Explanation 1:

 3 -> 3 -> 3 is largest palindromic sublist
Explanation 2:

 2 -> 1 -> 2 -> 1 -> 2 is largest palindromic sublist.


//Java


/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    /*
    N^2 solution time complexity can also pass,
    So can we just retrieve the numbers from the list and them find longest
    palindromic subarray??
    We can iterate over the list and store all numbers
    in another list. Now we can use N^2 brute force solution
    to calculate the longest palindromic substring in
    the given list.
    */
    public int solve(ListNode head) {
        if(head == null || head.next == null)
            return head == null ? 0 : 1;
        int ans = Integer.MIN_VALUE;
        ListNode h1 = head, h2 = null;

        while(h1 != null){
            ListNode t = h1;
            //For Even length palindromes
            ListNode cur1 = h2, cur2 = h1;
            h1 = h1.next;
            //For Odd length palindromes
            ListNode trav1 = h1, trav2 = h2;
            //For odd length palindromes we have middle element so cnt is initially 1
            int cnt = 1;
            while(trav1 != null && trav2 != null){
                if(trav1.val != trav2.val){
                    break;
                } 
                cnt += 2;
                trav1 = trav1.next;
                trav2 = trav2.next;
            }
            ans = Math.max(ans, cnt);
            //For even length palindromes we dont have middle element so cnt is initially 0
            cnt = 0;
            while(cur1 != null && cur2 != null){
                if(cur1.val != cur2.val){
                    break;
                } 
                cnt += 2;
                cur1 = cur1.next;
                cur2 = cur2.next;
            }
            ans = Math.max(ans, cnt);
            t.next = h2;
            h2 = t;
        }
        return ans;
    }
}
