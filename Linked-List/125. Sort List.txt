Problem Description
Sort a linked list, A in O(n log n) time using constant space complexity.



Problem Constraints
0 <= |A| = 105



Input Format
The first and the only arugment of input contains a pointer to the head of the linked list, A.



Output Format
Return a pointer to the head of the sorted linked list.



Example Input
Input 1:

A = [3, 4, 2, 8]
Input 2:

A = [1]


Example Output
Output 1:

[2, 3, 4, 8]
Output 2:

[1]


Example Explanation
Explanation 1:

 The sorted form of [3, 4, 2, 8] is [2, 3, 4, 8].
Explanation 2:

 The sorted form of [1] is [1].


//Java


/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null)
            return head;
        ListNode mid = findMiddle(head);
        ListNode h2 = mid.next;
        mid.next = null;
        head = sortList(head);
        h2 = sortList(h2);
        return merge(head, h2);
    }

    public ListNode findMiddle(ListNode head){
        ListNode fast = head, slow = head;
        while(fast.next != null && fast.next.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
    public ListNode merge(ListNode h1, ListNode h2) {
        if(h1 == null)
            return h2;
        if(h2 == null)
            return h1;
        ListNode h3 = null, trav = null;
        if(h1.val < h2.val){
            h3 = h1;
            trav = h1;
            h1 = h1.next;
        }else{
            h3 = h2;
            trav = h2;
            h2 = h2.next;
        }

        while(h1 != null && h2 != null){
            if(h1.val < h2.val){
                trav.next = h1;
                h1 = h1.next;
            }else{
                trav.next = h2;
                h2 = h2.next;
            }
            trav = trav.next;
        }

        if(h1 == null)
            trav.next = h2;
        if(h2 == null)
            trav.next = h1;
        return h3;
    }
}
