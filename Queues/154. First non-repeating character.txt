Problem Description
Given a string A denoting a stream of lowercase alphabets, you have to make a new string B.
B is formed such that we have to find the first non-repeating character each time a character is inserted to the stream and append it at the end to B. If no non-repeating character is found, append '#' at the end of B.



Problem Constraints
1 <= |A| <= 100000



Input Format
The only argument given is string A.



Output Format
Return a string B after processing the stream of lowercase alphabets A.



Example Input
Input 1:

 A = "abadbc"
Input 2:

 A = "abcabc"


Example Output
Output 1:

"aabbdd"
Output 2:

"aaabc#"


Example Explanation
Explanation 1:

"a"      -   first non repeating character 'a'
"ab"     -   first non repeating character 'a'
"aba"    -   first non repeating character 'b'
"abad"   -   first non repeating character 'b'
"abadb"  -   first non repeating character 'd'
"abadbc" -   first non repeating character 'd'
Explanation 2:

"a"      -   first non repeating character 'a'
"ab"     -   first non repeating character 'a'
"abc"    -   first non repeating character 'a'
"abca"   -   first non repeating character 'b'
"abcab"  -   first non repeating character 'c'
"abcabc" -   no non repeating character so '#'


//Java


public class Solution {
    public String solve(String A) {
        //TC = O(N) || SC = O(range of chars)
        int n = A.length();
        //array to maintain frequency of Characters in the stream
        int[] arr = new int[26];
        //Queue to maintain order of first non-repeating character. 
        Queue<Character> q = new LinkedList<>();
        StringBuilder ans = new StringBuilder();
        for(int i = 0; i < n; i++){
            char c = A.charAt(i);
            //increase the frequency of current element in freq array.
            arr[c-'a']++;
            //if current chars freq is one then add to the queue
            if(arr[c-'a'] == 1){
                q.offer(c);
            }
            //remove the characters from the queue if freq of it is greater than 1.
            while(!q.isEmpty() && arr[q.peek() - 'a'] > 1){
                q.poll();
            }
            //if queue is empty that means it doesnt have any non-repeating character so append '#' to 
            //answer else append peek character of queue to the answer.
            if(q.isEmpty())
                ans.append('#');
            else
                ans.append(q.peek());
        }
        return ans.toString();
    }
}
