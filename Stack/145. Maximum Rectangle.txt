Given a 2D binary matrix of integers A containing 0's and 1's of size N x M.

Find the largest rectangle containing only 1's and return its area.

Note: Rows are numbered from top to bottom and columns are numbered from left to right.


Input Format

The only argument given is the integer matrix A.
Output Format

Return the area of the largest rectangle containing only 1's.
Constraints

1 <= N, M <= 1000
0 <= A[i] <= 1
For Example

Input 1:
    A = [   [0, 0, 1]
            [0, 1, 1]
            [1, 1, 1]   ]
Output 1:
    4

Input 2:
    A = [   [0, 1, 0, 1]
            [1, 0, 1, 0]    ]
Output 2:
    1
    

// Java


public class Solution {
    public int solve(int[][] A) {
        /*
        We have already solved the largest rectangle in histogram problem
        can we boil down this problem to largest rectangle in histogram problem?

        Yes but how?
        
        For the given matrix by calculating prefix sum columnwise we
        can construct an array of heights through which we can calculate area
            Given matrix     ---->    Construted arrays of heights for histogram
                0 0 1                       0 0 1 -->  area = 0
                0 1 1                       0 1 2 -->  area = 2
                1 1 1                       1 2 3 -->  area = 4
        
        TC = O(N) || SC = O(N)
        */
        int n = A.length, m = A[0].length;
        int[] temp = new int[m];
        int ans = Integer.MIN_VALUE;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                temp[j] = A[i][j] != 0 ? A[i][j]+temp[j] : 0;
            }
            ans = Math.max(ans, largestRectangleArea(temp));
        }
        return ans;
    }

    public int largestRectangleArea(int[] A) {
        int[] x1 = prevSmaller(A);
        // for(int ele : x1)
        //     System.out.print(ele+", ");
        // System.out.println();
        int[] x2 = nextSmaller(A);
        // for(int ele : x2)
        //     System.out.print(ele+", ");
        int n = A.length;
        int ans = Integer.MIN_VALUE;
        for(int i = 0; i < n; i++){
            int height = A[i];
            int leftSmallestIdx = x1[i];
            int rightSmallestIndex = x2[i];
            int width = rightSmallestIndex - leftSmallestIdx - 1;
            int area = height * width;
            ans = Math.max(ans , area);
        }
        return ans;
    }

    public int[] prevSmaller(int[] A) {
        int n = A.length;
        int[] ans = new int[n];
        Arrays.fill(ans, -1);
        Stack<Integer> st = new Stack<>();
        for(int i = 0; i < n; i++){
            while(!st.isEmpty() && A[i] <= A[st.peek()]){
                st.pop();
            }

            ans[i] = st.size() > 0 ? st.peek() : -1;
            st.push(i);
        }
        return ans;
    }

    public int[] nextSmaller(int[] A) {
        int n = A.length;
        int[] ans = new int[n];
        Arrays.fill(ans, -1);
        Stack<Integer> st = new Stack<>();
        for(int i = n-1; i >= 0; i--){
            while(!st.isEmpty() && A[i] <= A[st.peek()]){
                st.pop();
            }

            ans[i] = st.size() > 0 ? st.peek() : n;
            st.push(i);
        }
        return ans;
    }
}
