Problem Description
An arithmetic expression is given by a character array A of size N. Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each character may be an integer or an operator.



Problem Constraints
1 <= N <= 105



Input Format
The only argument given is character array A.



Output Format
Return the value of arithmetic expression formed using reverse Polish Notation.



Example Input
Input 1:
    A =   ["2", "1", "+", "3", "*"]
Input 2:
    A = ["4", "13", "5", "/", "+"]


Example Output
Output 1:
    9
Output 2:
    6


Example Explanation
Explaination 1:
    starting from backside:
    * : () * ()
    3 : () * (3)
    + : (() + ()) * (3)
    1 : (() + (1)) * (3)
    2 : ((2) + (1)) * (3)
    ((2) + (1)) * (3) = 9
Explaination 2:
    + : () + ()
    / : () + (() / ())
    5 : () + (() / (5))
    13 : () + ((13) / (5))
    4 : (4) + ((13) / (5))
    (4) + ((13) / (5)) = 6


//Java


public class Solution {
    public int evalRPN(String[] A) {
        Stack<Integer> st = new Stack<>();
        for(int i = 0; i < A.length; i++){
            boolean flag = true;
            int val = Integer.MIN_VALUE;
            try{
                val = Integer.parseInt(A[i]);
            }catch(Exception ex){
                flag = false;
            }
            if(!flag){
                int res = evalueate(A[i], st.pop(), st.pop());
                st.push(res);
            }else{
                st.push(val);
            }
        }
        return st.peek();
    }

    public int evalueate(String operator, int a, int b){
        switch(operator){
            case "+":
                return b+a;
            case "-":
                return b-a;
            case "*":
                return b*a;
            case "/":
                return b/a;
        }
        return 0;
    }
}
